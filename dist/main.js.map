{"version":3,"sources":["webpack://dungeon_crawler/webpack/bootstrap","webpack://dungeon_crawler/webpack/runtime/publicPath","webpack://dungeon_crawler/./src/scripts/utils/global_vars.js","webpack://dungeon_crawler/./src/scripts/collision_box.js","webpack://dungeon_crawler/./src/scripts/wall.js","webpack://dungeon_crawler/./src/scripts/room.js","webpack://dungeon_crawler/./src/scripts/coin.js","webpack://dungeon_crawler/./src/scripts/utils/func_utils.js","webpack://dungeon_crawler/./src/scripts/player.js","webpack://dungeon_crawler/./src/scripts/entity.js","webpack://dungeon_crawler/./src/scripts/game.js","webpack://dungeon_crawler/./src/assets/images/coin/coin.png","webpack://dungeon_crawler/./src/assets/images/rogue/rogue_walk.png","webpack://dungeon_crawler/./src/index.js","webpack://dungeon_crawler/./src/scripts/utils/install_listeners.js"],"names":["__webpack_require__","SPRITE_DIMS","KEYS","87","65","83","68","16","ROOMS","SESSION","SPRITES","BG_IMGS","ALL_PATHS","WEIGHTS","4","3","2","1","GAME_OPTIONS","entity","width","height","this","pos","originPos","x","y","topLeft","topRight","bottomRight","bottomLeft","center","top","bottom","right","left","sides","ctx","strokeStyle","strokeRect","ex","ey","ew","eh","colBoxHook","updateSides","beginPath","fillStyle","fillRect","neighbor","randIdx","entryDir","walls","numPaths","coins","generateCoins","neighbors","up","undefined","down","exitDir","Object","keys","prevRoom","values","nodePos","Global","addValidNeighbors","newPaths","paths","buildPaths","pathsArr","split","filter","path","randNumPaths","length","Math","floor","random","background","assignBlockedPaths","buildRoomWalls","push","shuffle","i","pop","sort","join","animatedObjects","forEach","coin","collect","object","animate","drawImage","draw","font","fillText","Wall","spritePalette","frameInterval","frameCount","drawOptions","palY","collidedOnSide","randCoinSound","play","c","w","palX","colBoxWidth","colBoxHeight","image","_sWidth","_sHeight","_dWidth","_dHeight","colBox","ColBox","collisions","side","otherObject","otherSide","collidedWithSide","centerOnEntity","newGame","room","Game","thisSide","upperDiff","lowerDiff","collided","thisYVal","thisXMin","thisXMax","otherYVal","otherXMin","otherXMax","thisXVal","thisYMin","thisYMax","otherXVal","otherYMin","otherYMax","roomChange","currRoom","nextNodePos","Room","max","toString","includes","document","getElementById","numCoins","weightedNumCoins","randNumCoins","Coin","arr","j","speed","normalizedSpeed","parseFloat","sqrt","pace","speedModifier","stride","stepCount","dir","direction","shift","wall","stridePalettePos","newRoomPos","playerSprite","player","Player","startingRoom","gameStep","bind","stop","requestId","requestStop","clearRect","move","requestAnimationFrame","cancelAnimationFrame","addEventListener","canvas","getContext","e","keyCode","howTo","classList","add","querySelector","remove","restart","preventDefault","installListeners","coinSprite","Image","src","coinImg","onload","playerImg","setTimeout"],"mappings":"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","file":"main.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.p = \"/dist/\";","export const WIDTH = 720;\nexport const HEIGHT = 720;\nexport const SPRITE_DIMS = [48,48];\nexport const FPS = 1000/60;\nexport const KEYS = {\n  87: false, // W\n  65: false, // A\n  83: false, // S\n  68: false, // D\n  16: false, // L-Shift\n};\nexport const ROOMS = {};\n\nexport const SESSION = {};\nexport const SPRITES = {};\nexport const BG_IMGS = {};\n\nexport const COIN_WEIGHTS = {\n  3: 10,\n  2: 20,\n  1: 30,\n  0: 20, \n};\n\nexport const ALL_PATHS = [\n  \"DLRU\",\n  \"DLR\",\n  \"DLU\",\n  \"LRU\",\n  \"DRU\",\n  \"DL\",\n  \"DR\",\n  \"DU\",\n  \"LR\",\n  \"LU\",\n  \"RU\",\n  \"D\",\n  \"L\",\n  \"R\",\n  \"U\",\n];\n\nexport const WEIGHTS = {\n  4: {\n    4: 45,\n    3: 45,\n    2: 9,\n    1: 1,\n  },\n  3: {\n    3: 70,\n    2: 25,\n    1: 5,\n  },\n  2: {\n    2: 60,\n    1: 40,\n  },\n};\n\nexport const GAME_OPTIONS = {};\nexport const REQUEST = {};","\n\nclass ColBox {\n  constructor(entity, width, height) {\n    this.entity = entity;\n    this.width = width;\n    this.height = height;\n    this.pos = this.originPos();\n\n    const [x,y] = this.pos;\n    const topLeft = this.pos;\n    const topRight = [x+width,y];\n    const bottomRight = [x+width,y+height];\n    const bottomLeft = [x,y+height];\n    \n    this.center = [x+(width/2),y+(height/2)];\n    this.top = [[topLeft[0],topRight[0]], topLeft[1]];\n    this.bottom = [[bottomLeft[0],bottomRight[0]], bottomLeft[1]];\n    this.right = [topRight[0], [topRight[1],bottomRight[1]]];\n    this.left = [topLeft[0], [topLeft[1],bottomLeft[1]]];\n    this.sides = [this.top, this.bottom, this.right, this.left];\n    \n  }\n  draw(ctx) {\n    ctx.strokeStyle = \"transparent\";\n    ctx.strokeRect(\n      this.pos[0],\n      this.pos[1],\n      this.width,\n      this.height,\n    )\n  }\n\n  updateSides() {\n    const [x,y] = this.pos;\n    const topLeft = this.pos;\n    const topRight = [x+this.width,y];\n    const bottomRight = [x+this.width,y+this.height];\n    const bottomLeft = [x,y+this.height];\n    this.center = [x+(this.width/2),y+(this.height/2)];\n    this.top = [[topLeft[0],topRight[0]], topLeft[1]];\n    this.bottom = [[bottomLeft[0],bottomRight[0]], bottomLeft[1]];\n    this.right = [topRight[0], [topRight[1],bottomRight[1]]];\n    this.left = [topLeft[0], [topLeft[1],bottomLeft[1]]];\n  }\n\n  originPos() {\n    const [ex,ey] = [this.entity.pos[0], this.entity.pos[1]];\n    const [ew,eh] = [this.entity.width, this.entity.height];\n    const [tw,th] = [this.width, this.height];\n    const x = ex + ((ew-tw)/2);\n    const y = ey + eh - th;\n    return [x,y];\n  }\n\n  centerOnEntity() {\n    this.pos = this.entity.colBoxHook();\n    this.updateSides();\n  }\n\n}\n\nexport default ColBox;","class Wall {\n  constructor(pos, width, height) {\n    this.width = width;\n    this.height = height;\n    this.pos = pos;\n    const [x,y] = this.pos;\n    const topLeft = this.pos;\n    const topRight = [x+this.width,y];\n    const bottomRight = [x+this.width,y+this.height];\n    const bottomLeft = [x,y+this.height];\n    this.top = [[topLeft[0],topRight[0]], topLeft[1]];\n    this.bottom = [[bottomLeft[0],bottomRight[0]], bottomLeft[1]];\n    this.right = [topRight[0], [topRight[1],bottomRight[1]]];\n    this.left = [topLeft[0], [topLeft[1],bottomLeft[1]]];\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.fillStyle = \"#transparent\";\n    ctx.fillRect(...this.pos, this.width, this.height);\n  }\n\n}\n\nexport default Wall;","import * as Global from \"./utils/global_vars\";\nimport Wall from \"./wall\";\n\nimport {\n  randNumPaths,\n  addValidNeighbors,\n  buildPaths,\n  shuffle,\n  assignBlockedPaths,\n  generateCoins,\n} from \"./utils/func_utils\";\n\nclass Room {\n  constructor(neighbor) {\n    this.coins = generateCoins();\n    this.walls = [];\n    let randIdx;\n    this.neighbors = {\n      up: undefined,\n      down: undefined,\n      left: undefined,\n      right: undefined,\n    };\n    let entryDir;\n    if (neighbor) {\n      const exitDir = Object.keys(neighbor)[0];\n      const prevRoom = Object.values(neighbor)[0];\n      this.nodePos = [...prevRoom.nodePos];\n      switch(exitDir) {\n        case \"up\":\n          this.neighbors.down = prevRoom;\n          entryDir = \"D\";\n          this.nodePos[1]++;\n          break;\n        case \"down\":\n          this.neighbors.up = prevRoom;\n          entryDir = \"U\";\n          this.nodePos[1]--;\n          break;\n        case \"left\":\n          this.neighbors.right = prevRoom;\n          entryDir = \"R\";\n          this.nodePos[0]--;\n          break;\n        case \"right\":\n          this.neighbors.left = prevRoom;\n          entryDir = \"L\";\n          this.nodePos[0]++;\n          break;\n      }\n    } else {\n      this.nodePos = [0,0];\n    }\n    \n    Global.ROOMS[`${this.nodePos}`] = this;\n\n    addValidNeighbors(this);\n    let walls, numPaths, randPaths;\n    let newPaths = [];\n    let paths = buildPaths(this);\n    let pathsArr = paths.split(\"\");\n    if (neighbor) {\n      // if not initial room\n      pathsArr = pathsArr.filter(path => path !== entryDir); // remove entryDir from paths\n      numPaths = randNumPaths(paths.length); // weighted random number generator, prefers more paths\n      if (numPaths === paths.length) { // if all 4 paths are available\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths}${paths}${randIdx}`];\n        assignBlockedPaths(this, paths);\n        walls = this.buildRoomWalls(paths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      } else { // less than 4 paths available\n        shuffle(pathsArr); // randomize the path choices\n        newPaths.push(entryDir); // MUST ALWAYS have the path you enter from\n        numPaths--;\n        for (let i = 0; i < numPaths; i++) { newPaths.push(pathsArr.pop()) }\n        newPaths = newPaths.sort().join(\"\");\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths+1}${newPaths}${randIdx}`];\n        if (!this.background) {\n          \n        }\n        assignBlockedPaths(this, newPaths);\n        walls = this.buildRoomWalls(newPaths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      }\n    } else {\n      numPaths = randNumPaths(paths.length);\n      if (numPaths === paths.length) {\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths}${paths}${randIdx}`];\n        walls = this.buildRoomWalls(paths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      } else {\n        shuffle(pathsArr);\n        for (let i = 0; i < numPaths; i++) { newPaths.push(pathsArr.pop()) }\n        newPaths = newPaths.sort().join(\"\");\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths}${newPaths}${randIdx}`];\n        assignBlockedPaths(this, newPaths);\n        walls = this.buildRoomWalls(newPaths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      }\n    }\n    this.animatedObjects = {};\n    Object.values(this.coins).forEach(coin => {\n      this.animatedObjects[`coin-${coin.pos}`] = coin;\n    });\n\n    \n\n  }\n\n  animate() {\n    this.collect();\n    Object.values(this.animatedObjects).forEach(object => object.animate())\n  }\n\n  collect() {\n    for (let coin of Object.values(this.coins)) {\n      if (coin.collect()) {\n        delete this.animatedObjects[`coin-${coin.pos}`];\n        delete this.coins[`${coin.pos}`];\n        Global.SESSION.coinCount++;\n        return;\n      }\n    }\n  }\n\n\n  draw(ctx) {\n    ctx.drawImage(this.background, 0, 0);\n    // this.walls.forEach(wall => wall.draw(ctx));\n    Object.values(this.animatedObjects).forEach(object => object.draw(ctx));\n    ctx.fillStyle = \"#fffaf4\";\n    ctx.font = \"20px arial\";\n    ctx.fillText(`Room [ ${this.nodePos} ]`, 15, 30);\n    ctx.fillText(`Coins x ${Global.SESSION.coinCount}`, 590, 30);\n  }\n\n  buildRoomWalls(paths) {\n    let walls = [];\n    switch(paths) {\n      case \"DLRU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        return walls;\n      case \"DLU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        return walls;\n      case \"LRU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        return walls;\n      case \"DRU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        return walls;\n      case \"DLR\":\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"LU\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        return walls;\n      case \"DU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        return walls;\n      case \"RU\":\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        return walls;\n      case \"DL\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        return walls;\n      case \"DR\":\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"LR\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"L\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"R\":\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"U\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        return walls;\n      case \"D\":\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n    }\n  }\n\n}\n\n\n\nexport default Room;","import ColBox from \"./collision_box\";\nimport { collidedWithSide, randCoinSound } from \"./utils/func_utils\";\nimport * as Global from \"./utils/global_vars\";\n\nclass Entity {\n  constructor(pos,width,height,spritePalette) {\n    this.pos = pos;\n    this.width = width;\n    this.height = height;\n    const colBoxWidth = width;\n    const colBoxHeight = height;\n    \n    this.spritePalette = spritePalette;\n    this.drawOptions = {\n      image: spritePalette,\n      palX: 0,\n      palY: 0,\n      _sWidth: width,\n      _sHeight: height,\n      x: pos[0],\n      y: pos[1],\n      _dWidth: width,\n      _dHeight: height,\n    };\n    this.colBox = new ColBox(this,colBoxWidth,colBoxHeight);\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n    this.collisions = {\n      top: false,\n      bottom: false,\n      left: false,\n      right: false,\n    };\n    \n  }\n\n  colBoxHook() { // this will center the colBox on the bottom\n    let [x,y] = [this.pos[0],this.pos[1]];\n    let [cx,cy] = [\n      x+((this.width - this.colBox.width)/2),\n      y+(this.height - this.colBox.height),\n    ];\n    return [cx,cy];\n  }\n\n  updateSides() {\n    this.colBox.updateSides();\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n  }\n\n  collidedOnSide(side, otherObject) {\n    let otherSide;\n    switch(side) {\n      case \"top\":\n        otherSide = \"bottom\";\n        break;\n      case \"bottom\":\n        otherSide = \"top\";\n        break;\n      case \"left\":\n        otherSide = \"right\";\n        break;\n      case \"right\":\n        otherSide = \"left\";\n        break;\n      default:\n        otherSide = null;\n        break;\n    }\n    this.collisions[side] = collidedWithSide(side, this[side], otherObject[otherSide]);\n    return this.collisions[side];\n  }\n\n  draw(ctx) {\n    ctx.drawImage(...Object.values(this.drawOptions));\n    this.colBox.centerOnEntity();\n    this.colBox.draw(ctx);\n  }\n}\n\nclass Coin extends Entity {\n  constructor(pos, width, height, spritePalette) {\n    super(pos, width, height, spritePalette);\n    this.frameInterval = 12;\n    this.frameCount = 0;\n    this.drawOptions.palY = 0;\n  }\n\n  collect() {\n    if (\n      this.collidedOnSide(\"top\", Global.SESSION.game.player) ||\n      this.collidedOnSide(\"bottom\", Global.SESSION.game.player) ||\n      this.collidedOnSide(\"left\", Global.SESSION.game.player) ||\n      this.collidedOnSide(\"right\", Global.SESSION.game.player)\n    ) {\n      randCoinSound().play();\n      return true;\n    }\n    return false;\n  }\n\n  animate() {\n    const i = this.frameInterval;\n    const c = this.frameCount;\n    const w = this.width;\n    if (c < i) {\n      this.drawOptions.palX = w * 0;\n      this.frameCount++;\n    } else if (c < i*2) {\n      this.drawOptions.palX = w * 1;\n      this.frameCount++;\n    } else if (c < i*3) {\n      this.drawOptions.palX = w * 2;\n      this.frameCount++;\n    } else if (c < i*4) {\n      this.drawOptions.palX = w * 3;\n      this.frameCount++;\n    } else if (c < i*5) {\n      this.drawOptions.palX = w * 4;\n      this.frameCount++;\n    } else if (c < i*6) {\n      this.drawOptions.palX = w * 5;\n      this.frameCount++;\n    } else if (c < i*7) {\n      this.drawOptions.palX = w * 6;\n      this.frameCount++;\n    } else if (c < i*8) {\n      this.drawOptions.palX = w * 7;\n      this.frameCount++;\n    } else {\n      this.drawOptions.palX = w * 0;\n      this.frameCount = 0;\n    }\n  }\n}\n\nexport default Coin;","import * as Global from \"./global_vars\";\nimport Wall from \"../wall\";\nimport Room from \"../room\";\nimport Game from \"../game\";\nimport Entity from \"../entity\";\nimport Coin from \"../coin\";\n\n\nexport const newGame = () => {\n  if (Global.SESSION.game) {\n    Global.SESSION.game.stop();\n    delete Global.SESSION[\"game\"];\n    delete Global.SESSION[\"player\"];\n    delete Global.SESSION[\"coinCount\"];\n    for (let room in Global.ROOMS) {\n      delete Global.ROOMS[`${room.nodePos}`];\n    };\n  }\n  new Game(...Object.values(Global.GAME_OPTIONS));\n}\n\nexport const collidedWithSide = (side, thisSide, otherSide) => {\n  let collided = false;\n  let upperDiff, lowerDiff;\n  const upperBounds = 10;\n  const lowerBounds = 0;\n  if (side === \"top\" || side === \"bottom\") {\n    const thisYVal = thisSide[1];\n    const [thisXMin, thisXMax] = thisSide[0];\n    const otherYVal = otherSide[1];\n    const [otherXMin, otherXMax] = otherSide[0];\n    \n    switch (side) {\n      case \"top\":\n        upperDiff = (otherYVal - thisYVal) < upperBounds;\n        lowerDiff = (otherYVal - thisYVal) > lowerBounds;\n        collided = \n          (thisYVal < otherYVal) &&\n          (thisXMin < otherXMax) &&\n          (thisXMax > otherXMin) &&\n          upperDiff && lowerDiff;\n        break;\n      case \"bottom\":\n        upperDiff = (thisYVal - otherYVal) < upperBounds;\n        lowerDiff = (thisYVal - otherYVal) > lowerBounds;\n        collided = \n          (thisYVal > otherYVal) &&\n          (thisXMin < otherXMax) &&\n          (thisXMax > otherXMin) &&\n          upperDiff && lowerDiff;\n        break;\n      default:\n        break;\n    }\n\n    if (collided) return otherYVal;\n\n  } else {\n    const thisXVal = thisSide[0];\n    const [thisYMin, thisYMax] = thisSide[1];\n    const otherXVal = otherSide[0];\n    const [otherYMin, otherYMax] = otherSide[1];\n    \n    switch (side) {\n      case \"left\":\n        upperDiff = (otherXVal - thisXVal) < upperBounds;\n        lowerDiff = (otherXVal - thisXVal) > lowerBounds;\n        collided = \n          (thisXVal < otherXVal) &&\n          (thisYMin < otherYMax) &&\n          (thisYMax > otherYMin) &&\n          upperDiff && lowerDiff;\n          break;\n      case \"right\":\n        upperDiff = (thisXVal - otherXVal) < upperBounds;\n        lowerDiff = (thisXVal - otherXVal) > lowerBounds;\n        collided = \n          (thisXVal > otherXVal) &&\n          (thisYMin < otherYMax) &&\n          (thisYMax > otherYMin) &&\n          upperDiff && lowerDiff;\n          break;\n      default:\n        break;\n    }\n\n    if (collided) return otherXVal;\n    \n  }\n\n  return false;\n\n};\n\nexport const roomChange = (exitDir, currRoom) => {\n  let nextNodePos = [...currRoom.nodePos];\n  switch(exitDir) {\n    case \"up\":\n      nextNodePos[1] += 1;\n      break;\n    case \"down\":\n      nextNodePos[1] -= 1;\n      break;\n    case \"left\":\n      nextNodePos[0] -= 1;\n      break;\n    case \"right\":\n      nextNodePos[0] += 1;\n      break;\n  }\n  if (Global.ROOMS[`${nextNodePos}`]) {\n    Global.SESSION.game.room = Global.ROOMS[`${nextNodePos}`];\n  } else {\n    const neighbor = { [exitDir]: currRoom };\n    Global.SESSION.game.room = new Room(neighbor);\n    addValidNeighbors(currRoom);\n    addValidNeighbors(Global.SESSION.game.room);\n  }\n};\n\nexport const randNumPaths = max => {\n  let paths = [];\n  if (max > 3) {\n    for (let i = 0; i < Global.WEIGHTS[max][4]; i++) { paths.push(4) }\n    for (let i = 0; i < Global.WEIGHTS[max][3]; i++) { paths.push(3) }\n    for (let i = 0; i < Global.WEIGHTS[max][2]; i++) { paths.push(2) }\n    for (let i = 0; i < Global.WEIGHTS[max][1]; i++) { paths.push(1) }\n  } else if (max > 2) {\n    for (let i = 0; i < Global.WEIGHTS[max][3]; i++) { paths.push(3) }\n    for (let i = 0; i < Global.WEIGHTS[max][2]; i++) { paths.push(2) }\n    for (let i = 0; i < Global.WEIGHTS[max][1]; i++) { paths.push(1) }\n  } else if (max > 1) {\n    for (let i = 0; i < Global.WEIGHTS[max][2]; i++) { paths.push(2) }\n    for (let i = 0; i < Global.WEIGHTS[max][1]; i++) { paths.push(1) }\n  } else {\n    paths.push(1);\n  }\n\n  shuffle(paths);\n\n  return paths[Math.floor(Math.random()*paths.length)];\n  \n};\n\nexport const addValidNeighbors = room => {\n  let up = [...room.nodePos];\n  up[1] += 1;\n  up = up.toString();\n  let down = [...room.nodePos];\n  down[1] -= 1;\n  down = down.toString();\n  let left = [...room.nodePos];\n  left[0] -= 1;\n  left = left.toString();\n  let right = [...room.nodePos];\n  right[0] += 1;\n  right = right.toString();\n  if (\n    Global.ROOMS[up] && \n    (Global.ROOMS[up].neighbors.down !== \"X\") && \n    !room.neighbors.up\n  ) {\n    room.neighbors.up = Global.ROOMS[up];\n    Global.ROOMS[up].neighbors.down = room;\n  }\n  if (\n    Global.ROOMS[down] && \n    (Global.ROOMS[down].neighbors.up !== \"X\") && \n    !room.neighbors.down\n  ) {\n    room.neighbors.down = Global.ROOMS[down];\n    Global.ROOMS[down].neighbors.up = room;\n  }\n  if (\n    Global.ROOMS[left] && \n    (Global.ROOMS[left].neighbors.right !== \"X\") && \n    !room.neighbors.left\n  ) {\n    room.neighbors.left = Global.ROOMS[left];\n    Global.ROOMS[left].neighbors.right = room;\n  }\n  if (\n    Global.ROOMS[right] && \n    (Global.ROOMS[right].neighbors.left !== \"X\") && \n    !room.neighbors.right\n  ) {\n    room.neighbors.right = Global.ROOMS[right];\n    Global.ROOMS[right].neighbors.left = room;\n  }\n};\n\nexport const buildPaths = room => {\n  let paths = [];\n  let up = [...room.nodePos];\n  up[1] += 1;\n  up = up.toString();\n  let down = [...room.nodePos];\n  down[1] -= 1;\n  down = down.toString();\n  let left = [...room.nodePos];\n  left[0] -= 1;\n  left = left.toString();\n  let right = [...room.nodePos];\n  right[0] += 1;\n  right = right.toString();\n  if (!Global.ROOMS[up] || (Global.ROOMS[up].neighbors.down !== \"X\")) {\n    paths.push(\"U\");\n  }\n  if (!Global.ROOMS[down] || (Global.ROOMS[down].neighbors.up !== \"X\")) {\n    paths.push(\"D\");\n  }\n  if (!Global.ROOMS[left] || (Global.ROOMS[left].neighbors.right !== \"X\")) {\n    paths.push(\"L\");\n  }\n  if (!Global.ROOMS[right] || (Global.ROOMS[right].neighbors.left !== \"X\")) {\n    paths.push(\"R\");\n  }\n  return paths.sort().join(\"\");\n};\n\nexport const assignBlockedPaths = (room, paths) => {\n  if (!paths.includes(\"U\")) {\n    room.neighbors.up = \"X\";\n  }\n  if (!paths.includes(\"D\")) {\n    room.neighbors.down = \"X\";\n  }\n  if (!paths.includes(\"L\")) {\n    room.neighbors.left = \"X\";\n  }\n  if (!paths.includes(\"R\")) {\n    room.neighbors.right = \"X\";\n  }\n};\n\nconst randNumCoins = () => {\n  let weightedNumCoins = [];\n  for (let i = 0; i < Global.COIN_WEIGHTS[3]; i++) { weightedNumCoins.push(3) }\n  for (let i = 0; i < Global.COIN_WEIGHTS[2]; i++) { weightedNumCoins.push(2) }\n  for (let i = 0; i < Global.COIN_WEIGHTS[1]; i++) { weightedNumCoins.push(1) }\n  for (let i = 0; i < Global.COIN_WEIGHTS[0]; i++) { weightedNumCoins.push(0) }\n  const randIdx = Math.floor(Math.random() * weightedNumCoins.length);\n  shuffle(weightedNumCoins);\n  return weightedNumCoins[randIdx];\n};\n\nexport const randCoinSound = () => {\n  const i = Math.floor(Math.random() * 9);\n  return document.getElementById(`coin${i}`);\n}\n\nexport const generateCoins = () => {\n  const numCoins = randNumCoins();\n  let coins = {};\n  for (let i = 0; i < numCoins; i++) {\n    let x = Math.floor(Math.random()*592) + 64;\n    while (x > 336 && x < 384) x = Math.floor(Math.random()*592) + 64;\n    let y = Math.floor(Math.random()*592) + 64;\n    while (y > 336 && y < 384) y = Math.floor(Math.random()*592) + 64;\n    let pos = [x,y];\n    const coin = new Coin(pos, 16,16,Global.SPRITES.coin);\n    coins[`${coin.pos}`] = coin;\n  }\n  return coins;\n};\n\nexport const shuffle = arr => {\n  for (let i = arr.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n};","import Entity from \"./entity\";\nimport * as Global from \"./utils/global_vars\";\nimport { roomChange } from \"./utils/func_utils\";\n\nclass Player extends Entity {\n  constructor(pos,width,height,spritePalette) {\n    super(pos,width,height,spritePalette);\n    this.speed = 1;\n    this.normalizedSpeed = parseFloat(this.speed) / Math.sqrt(2);\n    this.pace = 24/this.speed;\n    this.speedModifier = 1;\n    this.stride = {\n      up: {\n        stepCount: 0,\n        palY: 48 * 6,\n      },\n      down: {\n        stepCount: 0,\n        palY: 48 * 0,\n      },\n      left: {\n        stepCount: 0,\n        palY: 48 * 2,\n      },\n      right: {\n        stepCount: 0,\n        palY: 48 * 4,\n      },\n    };\n  }\n\n  newRoomPos(dir) {\n    switch(dir) {\n      case \"up\":\n        this.pos[1] = 720-24;\n        break;\n      case \"down\":\n        this.pos[1] = -24;\n        break;\n      case \"left\":\n        this.pos[0] = 720-24;\n        break;\n      case \"right\":\n        this.pos[0] = -24;\n        break;\n    }\n  }\n\n  stridePalettePos(direction) {\n    this.pace = 24 / (this.speed * this.speedModifier);\n    if (this.stride[direction].stepCount <= this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 1;\n    } else if (this.stride[direction].stepCount <= 2 * this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 0;\n    } else if (this.stride[direction].stepCount <= 3 * this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 1;\n    } else if (this.stride[direction].stepCount <= 4 * this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 2;\n    } else if (this.stride[direction].stepCount > 4 * this.pace) {\n      this.stride[direction].stepCount = 0;\n      return 48 * 1;\n    }\n  }\n\n  move(walls) {\n    const [\n      up,\n      down,\n      left,\n      right,\n      shift\n    ] = [\n      Global.KEYS[87],\n      Global.KEYS[83],\n      Global.KEYS[65],\n      Global.KEYS[68],\n      Global.KEYS[16],\n    ];\n    if (shift) {\n      this.speedModifier = 2;\n    } else {\n      this.speedModifier = 1;\n    }\n\n    \n\n    // W key movements and sprite direction\n    if (up) {\n      if (left || right) {\n        this.colBox.pos[1] += -this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[1] += -this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"top\", wall)) break }\n      if (this.collisions.top) {\n        this.pos[1] = this.collisions.top - (this.height-this.colBox.height);\n      } else {\n        if (left || right && !this.collisions.top) {\n          this.pos[1] += -this.normalizedSpeed * this.speedModifier;\n          this.updateSides();\n        } else {\n          this.pos[1] += -this.speed * this.speedModifier;\n          this.updateSides();\n        }\n      }\n      this.drawOptions.palY = this.stride.up.palY;\n      if (!left && !right) {\n        this.drawOptions.palX = this.stridePalettePos(\"up\");\n        \n      }\n    }\n\n    // S key movements and sprite direction\n    if (down) {\n      if (left || right) {\n        this.colBox.pos[1] += this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[1] += this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"bottom\", wall)) break }\n      if (this.collisions.bottom) {\n        this.colBox.pos[1] = this.collisions.bottom;\n        this.pos[1] = this.collisions.bottom-48;\n      } else {\n        if (left || right) {\n          this.pos[1] += this.normalizedSpeed * this.speedModifier;\n          this.updateSides();\n        } else {\n          this.pos[1] += this.speed * this.speedModifier;\n          this.updateSides();\n        }\n      }\n      this.drawOptions.palY = this.stride.down.palY;\n      if (!left && !right) {\n        this.drawOptions.palX = this.stridePalettePos(\"down\");\n      }\n    }\n\n    // A key movement\n    if (left) {\n      if (up || down) {\n        this.colBox.pos[0] += -this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[0] += -this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"left\", wall)) break }\n      if (this.collisions.left) {\n        this.colBox.pos[0] = this.collisions.left;\n      } else {\n        if (up || down && !this.collisions.left) {\n          this.pos[0] += -this.normalizedSpeed * this.speedModifier;\n\n        } else {\n          this.pos[0] += -this.speed * this.speedModifier;\n\n        }\n      }\n      this.drawOptions.palY = this.stride.left.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"left\");\n    }\n\n    // D key movement\n    if (right) {\n      if (up || down) {\n        this.colBox.pos[0] += this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[0] += this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"right\", wall)) break }\n      if (this.collisions.right) {\n        this.colBox.pos[0] = this.collisions.right;\n        this.pos[0] = this.collisions.right-(this.colBox.width + this.colBox.width/2);\n      } else {\n        if (up || down) {\n          this.pos[0] += this.normalizedSpeed * this.speedModifier;\n          this.updateSides();\n        } else {\n          this.pos[0] += this.speed * this.speedModifier;\n          this.updateSides();\n        }\n      }\n      this.drawOptions.palY = this.stride.right.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"right\");\n    }\n\n    // if none of the keys are being pressed, go to default stance\n    if (!up && !down && !right && !left) {\n      this.drawOptions.palX = 48 * 1;\n    }\n\n    const [x,y] = this.pos;\n    let exitDir;\n    if (x < -24) {\n      exitDir = \"left\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    } else if (x > 720-24) {\n      exitDir = \"right\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    } else if (y < -24) {\n      exitDir = \"up\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    } else if (y > 720-24) {\n      exitDir = \"down\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    }\n\n    this.updateSides();\n    this.drawOptions.x = this.pos[0];\n    this.drawOptions.y = this.pos[1];\n  }\n\n}\n\nexport default Player;","import ColBox from \"./collision_box\";\nimport { collidedWithSide } from \"./utils/func_utils\";\n\nclass Entity {\n  constructor(pos,width,height,spritePalette) {\n    this.pos = pos;\n    this.width = width;\n    this.height = height;\n    const colBoxWidth = width/2;\n    const colBoxHeight = height/3;\n    \n    this.spritePalette = spritePalette;\n    this.drawOptions = {\n      image: spritePalette,\n      palX: 0,\n      palY: 0,\n      _sWidth: width,\n      _sHeight: height,\n      x: pos[0],\n      y: pos[1],\n      _dWidth: width,\n      _dHeight: height,\n    };\n    this.colBox = new ColBox(this,colBoxWidth,colBoxHeight);\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n    this.collisions = {\n      top: false,\n      bottom: false,\n      left: false,\n      right: false,\n    };\n    \n  }\n\n  colBoxHook() { // this will center the colBox on the bottom\n    let [x,y] = [this.pos[0],this.pos[1]];\n    let [cx,cy] = [\n      x+((this.width - this.colBox.width)/2),\n      y+(this.height - this.colBox.height),\n    ];\n    return [cx,cy];\n  }\n\n  updateSides() {\n    this.colBox.updateSides();\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n  }\n\n  collidedOnSide(side, otherObject) {\n    let otherSide;\n    switch(side) {\n      case \"top\":\n        otherSide = \"bottom\";\n        break;\n      case \"bottom\":\n        otherSide = \"top\";\n        break;\n      case \"left\":\n        otherSide = \"right\";\n        break;\n      case \"right\":\n        otherSide = \"left\";\n        break;\n      default:\n        otherSide = null;\n        break;\n    }\n    this.collisions[side] = collidedWithSide(side, this[side], otherObject[otherSide]);\n    return this.collisions[side];\n  }\n\n  draw(ctx) {\n    ctx.drawImage(...Object.values(this.drawOptions));\n    this.colBox.centerOnEntity();\n    this.colBox.draw(ctx);\n  }\n}\n\nexport default Entity;","import Player from \"./player\";\nimport Room from \"./room\";\nimport * as Global from \"./utils/global_vars\";\n\nclass Game {\n  constructor(ctx, playerSprite) {\n    const startingPos = [48*7, 48*7];\n    this.player = new Player(startingPos, ...Global.SPRITE_DIMS, playerSprite);\n    Global.SESSION.player = this.player;\n    this.ctx = ctx;\n    // const room = { \"left\": new Room() }; // testing new Room(room)\n    this.startingRoom = new Room();\n    this.room = this.startingRoom;\n    this.player.draw(ctx);\n    Global.SESSION.game = this;\n    Global.SESSION.stop = false;\n    Global.SESSION.coinCount = 0;\n    this.gameStep = this.gameStep.bind(this);\n    this.stop = this.stop.bind(this);\n    Global.SESSION.game.play();\n  }\n\n  stop() {\n    if (this.requestId) {\n      this.requestStop = true;\n    }\n  }\n\n  gameStep() {\n    this.requestId = undefined;\n    if (!this.requestId) {\n      const player = Global.SESSION.player;\n      this.ctx.clearRect(0,0, Global.WIDTH, Global.HEIGHT);\n      player.move(this.room.walls);\n      this.room.animate();\n      this.room.draw(this.ctx);\n      player.draw(this.ctx);\n      this.requestId = requestAnimationFrame(this.gameStep);\n      if (this.requestStop) {\n        cancelAnimationFrame(this.requestId);\n        return;\n      }\n    }\n  }\n\n  play() {\n    this.gameStep();\n    requestAnimationFrame(this.gameStep);\n  }\n}\n\nexport default Game;","export default __webpack_public_path__ + \"src/assets/images/coin/coin.png\";","export default __webpack_public_path__ + \"src/assets/images/rogue/rogue_walk.png\";","import \"./styles/index.scss\";\nimport installListeners from \"./scripts/utils/install_listeners\";\nimport * as Global from \"./scripts/utils/global_vars\";\nimport { newGame } from \"./scripts/utils/func_utils\";\nimport coinImg from \"./assets/images/coin/coin.png\";\nimport playerImg from \"./assets/images/rogue/rogue_walk.png\";\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n  const canvas = document.getElementById(\"display\");\n  canvas.width = Global.WIDTH;\n  canvas.height = Global.HEIGHT;\n  const ctx = canvas.getContext(\"2d\");\n\n  installListeners(Global.KEYS);\n\n  \n\n  let coinSprite = new Image();\n  coinSprite.src = coinImg;\n  coinSprite.onload = () => {\n    Global.SPRITES.coin = coinSprite;\n  };\n  \n  for (let path of Global.ALL_PATHS) {\n    path = path.split(\"\").sort().join(\"\");\n    for (let i = 0; i < 3; i++) {\n      const background = new Image();\n      background.src = `./assets/images/map_imgs/${path.length}/${path}/map${i}.png`;\n      \n      background.onload = () => {\n        Global.BG_IMGS[`${path.length}${path}${i}`] = background;\n        // Global.GB_IMGS[\"4DLRU0\"] = background\n      };\n    }\n  }\n\n  let playerSprite = new Image();\n  playerSprite.src = playerImg;\n  \n  playerSprite.onload = () => {\n    setTimeout(() => {\n      Global.GAME_OPTIONS[\"ctx\"] = ctx;\n    Global.GAME_OPTIONS[\"playerSprite\"] = playerSprite;\n    newGame();\n    },1000);\n    \n  }\n\n});","import * as Global from \"./global_vars\";\nimport Game from \"../game\";\nimport { newGame } from \"../utils/func_utils\";\n\nexport default (KEYS) => {\n  document.addEventListener(\"keydown\", e => {\n    if (e.keyCode === 87 && !KEYS[87]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 65 && !KEYS[65]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 83 && !KEYS[83]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 68 && !KEYS[68]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 16 && !KEYS[16]) KEYS[e.keyCode] = true;\n\n  });\n  document.addEventListener(\"keyup\", e => {\n    if (e.keyCode === 87 && KEYS[87]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 65 && KEYS[65]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 83 && KEYS[83]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 68 && KEYS[68]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 16 && KEYS[16]) KEYS[e.keyCode] = false;\n  });\n\n  const howTo = document.getElementById(\"how-to\");\n  \n  howTo.addEventListener(\"mouseenter\", e => {\n    document.getElementById(\"how-to-pointer\").classList.add(\"active\");\n    document.getElementById(\"how-to-sound\").play();\n    document.getElementById(\"how-to\").classList.add(\"active\");\n    document.querySelector(\"#how-to > ul\").classList.add(\"active\");\n  });\n  howTo.addEventListener(\"mouseleave\", e => {\n    document.getElementById(\"how-to\").classList.remove(\"active\");\n    document.getElementById(\"how-to-pointer\").classList.remove(\"active\");\n    document.querySelector(\"#how-to > ul\").classList.remove(\"active\");\n  });\n\n  const restart = document.getElementById(\"restart\");\n  restart.addEventListener(\"mouseenter\", e => {\n    document.getElementById(\"restart-sound\").play();\n    document.getElementById(\"restart\").classList.add(\"active\");\n    document.getElementById(\"restart-pointer\").classList.add(\"active\");\n  });\n  restart.addEventListener(\"mouseleave\", e => {\n    document.getElementById(\"restart\").classList.remove(\"active\");\n    document.getElementById(\"restart-pointer\").classList.remove(\"active\");\n  });\n  restart.addEventListener(\"click\", e => {\n    e.preventDefault();\n    newGame();\n  });\n\n}\n"],"sourceRoot":""}