{"version":3,"sources":["webpack://dungeon_crawler/./src/scripts/utils/global_vars.js","webpack://dungeon_crawler/./src/scripts/collision_box.js","webpack://dungeon_crawler/./src/scripts/wall.js","webpack://dungeon_crawler/./src/scripts/coin.js","webpack://dungeon_crawler/./src/scripts/enemy.js","webpack://dungeon_crawler/./src/scripts/room.js","webpack://dungeon_crawler/./src/scripts/utils/func_utils.js","webpack://dungeon_crawler/./src/scripts/player.js","webpack://dungeon_crawler/./src/scripts/entity.js","webpack://dungeon_crawler/./src/scripts/game.js","webpack://dungeon_crawler/./src/index.js","webpack://dungeon_crawler/./src/scripts/utils/install_listeners.js"],"names":["SPRITE_DIMS","KEYS","87","65","83","68","16","ROOMS","SESSION","SPRITES","BG_IMGS","ALL_PATHS","WEIGHTS","4","3","2","1","GAME_OPTIONS","entity","width","height","this","pos","originPos","x","y","topLeft","topRight","bottomRight","bottomLeft","center","top","bottom","right","left","sides","ctx","strokeStyle","strokeRect","ex","ey","ew","eh","colBoxHook","updateSides","beginPath","fillStyle","fillRect","spritePalette","frameInterval","frameCount","drawOptions","palY","collidedOnSide","Global","randCoinSound","play","i","c","w","palX","colBoxWidth","colBoxHeight","image","_sWidth","_sHeight","_dWidth","_dHeight","colBox","ColBox","collisions","side","otherObject","otherSide","collidedWithSide","drawImage","Object","values","centerOnEntity","draw","type","speed","pace","chasingPlayer","stepCount","stepMax","palXOffset","stride","up","down","direction","walls","normalized","normalizedMovement","distance","dx","nx","ny","dy","wall","stridePalettePos","neighbor","randIdx","entryDir","numPaths","generateCoins","enemies","generateEnemies","neighbors","undefined","exitDir","keys","prevRoom","nodePos","addValidNeighbors","newPaths","paths","buildPaths","pathsArr","split","filter","path","randNumPaths","length","Math","floor","random","background","assignBlockedPaths","buildRoomWalls","push","shuffle","pop","sort","join","numEnemies","enemy","Enemy","numCoins","randNumCoins","coins","coin","Coin","collect","forEach","animate","font","fillText","moveTo","lineWidth","lineTo","stroke","Wall","newGame","room","Game","thisSide","upperDiff","lowerDiff","collided","thisYVal","thisXMin","thisXMax","otherYVal","otherXMin","otherXMax","thisXVal","thisYMin","thisYMax","otherXVal","otherYMin","otherYMax","roomChange","currRoom","nextNodePos","Room","max","toString","includes","weightedNumCoins","document","getElementById","arr","j","myself","mx","my","sqrt","pow","randAngle","PI","cos","sin","angle","atan","abs","normalizedSpeed","parseFloat","speedModifier","stamina","hp","dir","shift","newRoomPos","playerSprite","fpsInterval","toPlayer","player","Player","startingRoom","gameStep","bind","stop","requestId","requestStop","requestAnimationFrame","now","Date","elapsed","then","clearRect","move","cancelAnimationFrame","addEventListener","canvas","getContext","e","keyCode","howTo","classList","add","querySelector","remove","restart","preventDefault","installListeners","coinSprite","Image","src","onload","monstersSprites","setTimeout"],"mappings":"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","file":"main.js","sourcesContent":["export const WIDTH = 720;\nexport const HEIGHT = 720;\nexport const SPRITE_DIMS = [48,48];\nexport const FPS = 1000/60;\nexport const KEYS = {\n  87: false, // W\n  65: false, // A\n  83: false, // S\n  68: false, // D\n  16: false, // L-Shift\n};\nexport const ROOMS = {};\n\nexport const SESSION = {};\nexport const SPRITES = {};\nexport const BG_IMGS = {};\n\nexport const COIN_WEIGHTS = {\n  3: 10,\n  2: 20,\n  1: 30,\n  0: 20, \n};\n\nexport const ALL_PATHS = [\n  \"DLRU\",\n  \"DLR\",\n  \"DLU\",\n  \"LRU\",\n  \"DRU\",\n  \"DL\",\n  \"DR\",\n  \"DU\",\n  \"LR\",\n  \"LU\",\n  \"RU\",\n  \"D\",\n  \"L\",\n  \"R\",\n  \"U\",\n];\n\nexport const WEIGHTS = {\n  4: {\n    4: 55,\n    3: 45,\n    2: 9,\n    1: 1,\n  },\n  3: {\n    3: 80,\n    2: 20,\n    1: 3,\n  },\n  2: {\n    2: 90,\n    1: 10,\n  },\n};\n\nexport const GAME_OPTIONS = {};\nexport const REQUEST = {};","\n\nclass ColBox {\n  constructor(entity, width, height) {\n    this.entity = entity;\n    this.width = width;\n    this.height = height;\n    this.pos = this.originPos();\n\n    const [x,y] = this.pos;\n    const topLeft = this.pos;\n    const topRight = [x+width,y];\n    const bottomRight = [x+width,y+height];\n    const bottomLeft = [x,y+height];\n    \n    this.center = [x+(width/2),y+(height/2)];\n    this.top = [[topLeft[0],topRight[0]], topLeft[1]];\n    this.bottom = [[bottomLeft[0],bottomRight[0]], bottomLeft[1]];\n    this.right = [topRight[0], [topRight[1],bottomRight[1]]];\n    this.left = [topLeft[0], [topLeft[1],bottomLeft[1]]];\n    this.sides = [this.top, this.bottom, this.right, this.left];\n    \n  }\n  draw(ctx) {\n    ctx.strokeStyle = \"transparent\";\n    ctx.strokeRect(\n      this.pos[0],\n      this.pos[1],\n      this.width,\n      this.height,\n    )\n  }\n\n  updateSides() {\n    const [x,y] = this.pos;\n    const topLeft = this.pos;\n    const topRight = [x+this.width,y];\n    const bottomRight = [x+this.width,y+this.height];\n    const bottomLeft = [x,y+this.height];\n    this.center = [x+(this.width/2),y+(this.height/2)];\n    this.top = [[topLeft[0],topRight[0]], topLeft[1]];\n    this.bottom = [[bottomLeft[0],bottomRight[0]], bottomLeft[1]];\n    this.right = [topRight[0], [topRight[1],bottomRight[1]]];\n    this.left = [topLeft[0], [topLeft[1],bottomLeft[1]]];\n  }\n\n  originPos() {\n    const [ex,ey] = [this.entity.pos[0], this.entity.pos[1]];\n    const [ew,eh] = [this.entity.width, this.entity.height];\n    const [tw,th] = [this.width, this.height];\n    const x = ex + ((ew-tw)/2);\n    const y = ey + eh - th;\n    return [x,y];\n  }\n\n  centerOnEntity() {\n    this.pos = this.entity.colBoxHook();\n    this.updateSides();\n  }\n\n}\n\nexport default ColBox;","class Wall {\n  constructor(pos, width, height) {\n    this.width = width;\n    this.height = height;\n    this.pos = pos;\n    const [x,y] = this.pos;\n    const topLeft = this.pos;\n    const topRight = [x+this.width,y];\n    const bottomRight = [x+this.width,y+this.height];\n    const bottomLeft = [x,y+this.height];\n    this.top = [[topLeft[0],topRight[0]], topLeft[1]];\n    this.bottom = [[bottomLeft[0],bottomRight[0]], bottomLeft[1]];\n    this.right = [topRight[0], [topRight[1],bottomRight[1]]];\n    this.left = [topLeft[0], [topLeft[1],bottomLeft[1]]];\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.fillStyle = \"#transparent\";\n    ctx.fillRect(...this.pos, this.width, this.height);\n  }\n\n}\n\nexport default Wall;","import ColBox from \"./collision_box\";\nimport { collidedWithSide, randCoinSound } from \"./utils/func_utils\";\nimport * as Global from \"./utils/global_vars\";\n// import Entity from \"./entity\";\n\nclass Entity {\n  constructor(pos,width,height,spritePalette) {\n    this.pos = pos;\n    this.width = width;\n    this.height = height;\n    const colBoxWidth = width;\n    const colBoxHeight = height;\n    \n    this.spritePalette = spritePalette;\n    this.drawOptions = {\n      image: spritePalette,\n      palX: 0,\n      palY: 0,\n      _sWidth: width,\n      _sHeight: height,\n      x: pos[0],\n      y: pos[1],\n      _dWidth: width,\n      _dHeight: height,\n    };\n    this.colBox = new ColBox(this,colBoxWidth,colBoxHeight);\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n    this.collisions = {\n      top: false,\n      bottom: false,\n      left: false,\n      right: false,\n    };\n    \n  }\n\n  colBoxHook() { // this will center the colBox on the bottom\n    let [x,y] = [this.pos[0],this.pos[1]];\n    let [cx,cy] = [\n      x+((this.width - this.colBox.width)/2),\n      y+(this.height - this.colBox.height),\n    ];\n    return [cx,cy];\n  }\n\n  updateSides() {\n    this.colBox.updateSides();\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n  }\n\n  collidedOnSide(side, otherObject) {\n    let otherSide;\n    switch(side) {\n      case \"top\":\n        otherSide = \"bottom\";\n        break;\n      case \"bottom\":\n        otherSide = \"top\";\n        break;\n      case \"left\":\n        otherSide = \"right\";\n        break;\n      case \"right\":\n        otherSide = \"left\";\n        break;\n      default:\n        otherSide = null;\n        break;\n    }\n    this.collisions[side] = collidedWithSide(side, this[side], otherObject[otherSide]);\n    return this.collisions[side];\n  }\n\n  draw(ctx) {\n    ctx.drawImage(...Object.values(this.drawOptions));\n    this.colBox.centerOnEntity();\n    this.colBox.draw(ctx);\n  }\n}\n\nclass Coin extends Entity {\n  constructor(pos, width, height, spritePalette) {\n    super(pos, width, height, spritePalette);\n    this.frameInterval = 12;\n    this.frameCount = 0;\n    this.drawOptions.palY = 0;\n  }\n\n  collect() {\n    if (\n      this.collidedOnSide(\"top\", Global.SESSION.game.player) ||\n      this.collidedOnSide(\"bottom\", Global.SESSION.game.player) ||\n      this.collidedOnSide(\"left\", Global.SESSION.game.player) ||\n      this.collidedOnSide(\"right\", Global.SESSION.game.player)\n    ) {\n      randCoinSound().play();\n      return true;\n    }\n    return false;\n  }\n\n  animate() {\n    const i = this.frameInterval;\n    const c = this.frameCount;\n    const w = this.width;\n    if (c < i) {\n      this.drawOptions.palX = w * 0;\n      this.frameCount++;\n    } else if (c < i*2) {\n      this.drawOptions.palX = w * 1;\n      this.frameCount++;\n    } else if (c < i*3) {\n      this.drawOptions.palX = w * 2;\n      this.frameCount++;\n    } else if (c < i*4) {\n      this.drawOptions.palX = w * 3;\n      this.frameCount++;\n    } else if (c < i*5) {\n      this.drawOptions.palX = w * 4;\n      this.frameCount++;\n    } else if (c < i*6) {\n      this.drawOptions.palX = w * 5;\n      this.frameCount++;\n    } else if (c < i*7) {\n      this.drawOptions.palX = w * 6;\n      this.frameCount++;\n    } else if (c < i*8) {\n      this.drawOptions.palX = w * 7;\n      this.frameCount++;\n    } else {\n      this.drawOptions.palX = w * 0;\n      this.frameCount = 0;\n    }\n  }\n}\n\nexport default Coin;","// import Entity from \"./entity\";\nimport { normalizedMovement } from \"./utils/func_utils\";\nimport * as Global from \"./utils/global_vars\";\n\nclass Entity {\n  constructor(pos,width,height,spritePalette) {\n    this.pos = pos;\n    this.width = width;\n    this.height = height;\n    const colBoxWidth = width;\n    const colBoxHeight = height;\n    \n    this.spritePalette = spritePalette;\n    this.drawOptions = {\n      image: spritePalette,\n      palX: 0,\n      palY: 0,\n      _sWidth: width,\n      _sHeight: height,\n      x: pos[0],\n      y: pos[1],\n      _dWidth: width,\n      _dHeight: height,\n    };\n    this.colBox = new ColBox(this,colBoxWidth,colBoxHeight);\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n    this.collisions = {\n      top: false,\n      bottom: false,\n      left: false,\n      right: false,\n    };\n    \n  }\n\n  colBoxHook() { // this will center the colBox on the bottom\n    let [x,y] = [this.pos[0],this.pos[1]];\n    let [cx,cy] = [\n      x+((this.width - this.colBox.width)/2),\n      y+(this.height - this.colBox.height),\n    ];\n    return [cx,cy];\n  }\n\n  updateSides() {\n    this.colBox.updateSides();\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n  }\n\n  collidedOnSide(side, otherObject) {\n    let otherSide;\n    switch(side) {\n      case \"top\":\n        otherSide = \"bottom\";\n        break;\n      case \"bottom\":\n        otherSide = \"top\";\n        break;\n      case \"left\":\n        otherSide = \"right\";\n        break;\n      case \"right\":\n        otherSide = \"left\";\n        break;\n      default:\n        otherSide = null;\n        break;\n    }\n    this.collisions[side] = collidedWithSide(side, this[side], otherObject[otherSide]);\n    return this.collisions[side];\n  }\n\n  draw(ctx) {\n    ctx.drawImage(...Object.values(this.drawOptions));\n    this.colBox.centerOnEntity();\n    this.colBox.draw(ctx);\n  }\n}\n\nclass Enemy extends Entity {\n  constructor(pos,width,height,spritePalette, type) {\n    super(pos,width,height,spritePalette);\n    this.speed = 1;\n    this.pace = 24/this.speed;\n    this.chasingPlayer = false;\n    this.stepCount = 0;\n    this.stepMax = this.pace * 4;\n    this.type = type;\n    let x, y;\n    switch(type) {\n      case \"blob\":\n        x = 48 * 3;\n        y = 48 * 0;\n        break;\n      case \"bat\":\n        x = 48 * 0;\n        y = 48 * 0;\n        break;\n      case \"ghost\":\n        x = 48 * 6;\n        y = 48 * 4;\n        break;\n    }\n    this.palXOffset = x;\n    this.stride = {\n      up: {\n        stepCount: 0,\n        palY: (48 * 3) + y,\n      },\n      down: {\n        stepCount: 0,\n        palY: (48 * 0 + y),\n      },\n      left: {\n        stepCount: 0,\n        palY: (48 * 1 + y),\n      },\n      right: {\n        stepCount: 0,\n        palY: (48 * 2 + y),\n      },\n    };\n  }\n\n  stridePalettePos(direction) {\n    this.pace = 24 / this.speed;\n    if (this.stride[direction].stepCount <= this.pace) {\n      this.stride[direction].stepCount++;\n      return (48 * 1) + this.palXOffset;\n    } else if (this.stride[direction].stepCount <= 2 * this.pace) {\n      this.stride[direction].stepCount++;\n      return (48 * 0) + this.palXOffset;\n    } else if (this.stride[direction].stepCount <= 3 * this.pace) {\n      this.stride[direction].stepCount++;\n      return (48 * 1) + this.palXOffset;\n    } else if (this.stride[direction].stepCount <= 4 * this.pace) {\n      this.stride[direction].stepCount++;\n      return (48 * 2) + this.palXOffset;\n    } else if (this.stride[direction].stepCount > 4 * this.pace) {\n      this.stride[direction].stepCount = 0;\n      return (48 * 1) + this.palXOffset;\n    }\n  }\n\n  move(walls) {\n    let normalized;\n    this.normalized = normalizedMovement(this, Global.SESSION.player, this.chasingPlayer);\n\n    if (normalized.distance < Global.SESSION.game.toPlayer) {\n      this.chasingPlayer = true;\n      this.stepCount = 0;\n      this.speed *= 2;\n      this.normalized = normalizedMovement(this, Global.SESSION.player, this.chasingPlayer);\n      if (dx >= 0) {\n        this.colBox[0] += normalized.nx;\n      } else {\n        this.colBox[0] -= normalized.nx;\n      }\n      this.colBox[1] += ny;\n      this.updateSides();\n    } else {\n      if (this.chasingPlayer) {\n        this.chasingPlayer = false;\n        this.speed /= 2;\n      }\n      if (this.stepCount === 0) {\n        this.normalized = normalizedMovement(this, Global.SESSION.player, this.chasingPlayer);\n      } else if (this.stepCount >= this.stepMax) {\n        this.stepCount = 0;\n      }\n\n      this.stepCount ++;\n    }\n\n    const {\n      nx,\n      ny,\n      dx,\n      dy,\n      distance,\n      up,\n      down,\n      left,\n      right,\n    } = normalized;\n    \n    if (up) {\n      for(let wall of walls) { if (this.collidedOnSide(\"top\", wall)) break; }\n      if (this.collisions.top) {\n        this.pos[1] = this.collisions.top - (this.height-this.colBox.height);\n      }\n      this.drawOptions.palY = this.stride.up.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"up\");\n    }\n\n    if (down) {\n      for(let wall of walls) { if (this.collidedOnSide(\"bottom\", wall)) break; }\n      if (this.collisions.bottom) {\n        this.pos[1] = this.collisions.bottom - 48;\n      }\n      this.drawOptions.palY = this.stride.down.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"down\");\n    }\n\n    if (left) {\n      for(let wall of walls) { if (this.collidedOnSide(\"left\", wall)) break; }\n      if (this.collisions.left) {\n        this.pos[1] = this.collisions.left - 48;\n      }\n      this.drawOptions.palY = this.stride.left.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"left\");\n    }\n\n    if (right) {\n      for(let wall of walls) { if (this.collidedOnSide(\"right\", wall)) break; }\n      if (this.collisions.right) {\n        this.pos[1] = this.collisions.right - 48;\n      }\n      this.drawOptions.palY = this.stride.right.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"right\");\n    }\n\n    if (!up && !down && !right && !left) {\n      this.drawOptions.palX = 48 * 1;\n    }\n\n    this.updateSides();\n    this.drawOptions.x = this.pos[0];\n    this.drawOptions.y = this.pos[1];\n  }\n\n}\n\nexport default Enemy;","import * as Global from \"./utils/global_vars\";\nimport Wall from \"./wall\";\nimport Coin from \"./coin\";\nimport Enemy from \"./enemy\";\n\nimport {\n  randNumPaths,\n  addValidNeighbors,\n  buildPaths,\n  shuffle,\n  assignBlockedPaths,\n  randNumCoins\n} from \"./utils/func_utils\";\n\n\nclass Room {\n  constructor(neighbor) {\n    this.generateCoins();\n    this.enemies = this.generateEnemies();\n    this.walls = [];\n    let randIdx;\n    this.neighbors = {\n      up: undefined,\n      down: undefined,\n      left: undefined,\n      right: undefined,\n    };\n    let entryDir;\n    if (neighbor) {\n      const exitDir = Object.keys(neighbor)[0];\n      const prevRoom = Object.values(neighbor)[0];\n      this.nodePos = [...prevRoom.nodePos];\n      switch(exitDir) {\n        case \"up\":\n          this.neighbors.down = prevRoom;\n          entryDir = \"D\";\n          this.nodePos[1]++;\n          break;\n        case \"down\":\n          this.neighbors.up = prevRoom;\n          entryDir = \"U\";\n          this.nodePos[1]--;\n          break;\n        case \"left\":\n          this.neighbors.right = prevRoom;\n          entryDir = \"R\";\n          this.nodePos[0]--;\n          break;\n        case \"right\":\n          this.neighbors.left = prevRoom;\n          entryDir = \"L\";\n          this.nodePos[0]++;\n          break;\n      }\n    } else {\n      this.nodePos = [0,0];\n    }\n    \n    Global.ROOMS[`${this.nodePos}`] = this;\n\n    addValidNeighbors(this);\n    let walls, numPaths, randPaths;\n    let newPaths = [];\n    let paths = buildPaths(this);\n    let pathsArr = paths.split(\"\");\n    if (neighbor) {\n      // if not initial room\n      pathsArr = pathsArr.filter(path => path !== entryDir); // remove entryDir from paths\n      numPaths = randNumPaths(paths.length); // weighted random number generator, prefers more paths\n      if (numPaths === paths.length) { // if all 4 paths are available\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths}${paths}${randIdx}`];\n        assignBlockedPaths(this, paths);\n        walls = this.buildRoomWalls(paths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      } else { // less than 4 paths available\n        shuffle(pathsArr); // randomize the path choices\n        newPaths.push(entryDir); // MUST ALWAYS have the path you enter from\n        numPaths--;\n        for (let i = 0; i < numPaths; i++) { newPaths.push(pathsArr.pop()) }\n        newPaths = newPaths.sort().join(\"\");\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths+1}${newPaths}${randIdx}`];\n        if (!this.background) {\n          \n        }\n        assignBlockedPaths(this, newPaths);\n        walls = this.buildRoomWalls(newPaths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      }\n    } else {\n      numPaths = randNumPaths(paths.length);\n      if (numPaths === paths.length) {\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths}${paths}${randIdx}`];\n        walls = this.buildRoomWalls(paths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      } else {\n        shuffle(pathsArr);\n        for (let i = 0; i < numPaths; i++) { newPaths.push(pathsArr.pop()) }\n        newPaths = newPaths.sort().join(\"\");\n        randIdx = Math.floor(Math.random()*3);\n        this.background = Global.BG_IMGS[`${numPaths}${newPaths}${randIdx}`];\n        assignBlockedPaths(this, newPaths);\n        walls = this.buildRoomWalls(newPaths);\n        this.walls.push(...walls);\n        Global.ROOMS[`${this.nodePos}`] = this;\n      }\n    }\n    // this.animatedObjects = {};\n    // Object.values(this.coins).forEach(coin => {\n    //   this.animatedObjects[`coin-${coin.pos}`] = coin;\n    // });\n\n  }\n\n  generateEnemies() {\n    const numEnemies = Object.keys(Global.ROOMS).length - 1;\n    let enemies = {};\n    for (let i = 0; i < numEnemies; i++) {\n      let x = Math.floor(Math.random()*592) + 64;\n      while (x > 336 && x < 384) x = Math.floor(Math.random()*592) + 64;\n      let y = Math.floor(Math.random()*592) + 64;\n      while (y > 336 && y < 384) y = Math.floor(Math.random()*592) + 64;\n      let pos = [x,y];\n      const enemy = new Enemy(pos, 16,16,Global.SPRITES.monsters, \"blob\");\n      enemies[`${enemy.pos}`] = enemy;\n    }\n    return enemies;\n  };\n\n  generateCoins() {\n    const numCoins = randNumCoins();\n    this.coins = {};\n    for (let i = 0; i < numCoins; i++) {\n      let x = Math.floor(Math.random()*592) + 64;\n      while (x > 336 && x < 384) x = Math.floor(Math.random()*592) + 64;\n      let y = Math.floor(Math.random()*592) + 64;\n      while (y > 336 && y < 384) y = Math.floor(Math.random()*592) + 64;\n      let pos = [x,y];\n      const coin = new Coin(pos, 16,16,Global.SPRITES.coin);\n      this.coins[`${coin.pos}`] = coin;\n    }\n  };\n\n  animate() {\n    this.collect();\n    Object.values(this.coins).forEach(coin => {\n      coin.animate();\n    });\n    // Object.values(this.animatedObjects).forEach(object => object.animate());\n\n  }\n\n  collect() {\n    for (let coin of Object.values(this.coins)) {\n      if (coin.collect()) {\n        delete this.coins[`${coin.pos}`];\n        Global.SESSION.coinCount++;\n        return;\n      }\n    }\n  }\n\n\n  draw(ctx) {\n    ctx.drawImage(this.background, 0, 0);\n    // this.walls.forEach(wall => wall.draw(ctx));\n    Object.values(this.coins).forEach(coin => coin.draw(ctx));\n    ctx.fillStyle = \"#fffaf4\";\n    ctx.font = \"20px arial\";\n    ctx.fillText(`Room [ ${this.nodePos} ]`, 15, 30);\n    ctx.fillText(`Coins x ${Global.SESSION.coinCount}`, 590, 30);\n    ctx.beginPath()\n    ctx.strokeStyle = \"#ffbb00\";\n    ctx.moveTo(15, 705);\n    ctx.lineWidth = 5;\n    ctx.lineTo(15 + (Global.SESSION.player.stamina/1000) * 100, 705);\n    ctx.stroke();\n    ctx.beginPath()\n    ctx.strokeStyle = \"#33ff00\";\n    ctx.moveTo(15, 690);\n    ctx.lineWidth = 10;\n    ctx.lineTo(15 + (Global.SESSION.player.hp/20) * 100, 690);\n    ctx.stroke();\n    ctx.beginPath()\n    ctx.strokeStyle = \"#ff0000\";\n    ctx.moveTo(115 - (1 - Global.SESSION.player.hp/20) * 100, 690);\n    ctx.lineWidth = 10;\n    ctx.lineTo(115, 690);\n    ctx.stroke();\n    // ctx.fillText(`Stamina = ${Global.SESSION.player.stamina}`, 15, 400);\n  }\n\n  buildRoomWalls(paths) {\n    let walls = [];\n    switch(paths) {\n      case \"DLRU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        return walls;\n      case \"DLU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        return walls;\n      case \"LRU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        return walls;\n      case \"DRU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        return walls;\n      case \"DLR\":\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"LU\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        return walls;\n      case \"DU\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        return walls;\n      case \"RU\":\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        return walls;\n      case \"DL\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        return walls;\n      case \"DR\":\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"LR\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"L\":\n        walls.push(new Wall([0,0], 48, 48*6)); // left up\n        walls.push(new Wall([0,48*9], 48, 48*6)); // left down\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"R\":\n        walls.push(new Wall([720-48,0], 48, 48*6)); // right up\n        walls.push(new Wall([720-48,48*9], 48, 48*6)); // right down\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n      case \"U\":\n        walls.push(new Wall([0,0], 48*6, 48)); // up left\n        walls.push(new Wall([48*9,0], 48*6, 48)); // up right\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,720-48], 720, 48)); // down blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        return walls;\n      case \"D\":\n        walls.push(new Wall([0,720-48], 48*6, 48)); // down left\n        walls.push(new Wall([48*9,720-48], 48*6, 48)); // down right\n        walls.push(new Wall([720-48,0], 48, 720)); // right blocked\n        walls.push(new Wall([0,0], 48, 720)); // left blocked\n        walls.push(new Wall([0,0], 720, 48)); // up blocked\n        return walls;\n    }\n  }\n\n}\n\n\n\nexport default Room;","import * as Global from \"./global_vars\";\nimport Room from \"../room\";\nimport Game from \"../game\";\n\n\nexport const newGame = () => {\n  if (Global.SESSION.game) {\n    Global.SESSION.game.stop();\n    delete Global.SESSION[\"game\"];\n    delete Global.SESSION[\"player\"];\n    delete Global.SESSION[\"coinCount\"];\n    for (let room in Global.ROOMS) {\n      delete Global.ROOMS[`${room.nodePos}`];\n    };\n  }\n  new Game(...Object.values(Global.GAME_OPTIONS));\n};\n\nexport const collidedWithSide = (side, thisSide, otherSide) => {\n  let collided = false;\n  let upperDiff, lowerDiff;\n  const upperBounds = 10;\n  const lowerBounds = 0;\n  if (side === \"top\" || side === \"bottom\") {\n    const thisYVal = thisSide[1];\n    const [thisXMin, thisXMax] = thisSide[0];\n    const otherYVal = otherSide[1];\n    const [otherXMin, otherXMax] = otherSide[0];\n    \n    switch (side) {\n      case \"top\":\n        upperDiff = (otherYVal - thisYVal) < upperBounds;\n        lowerDiff = (otherYVal - thisYVal) > lowerBounds;\n        collided = \n          (thisYVal < otherYVal) &&\n          (thisXMin < otherXMax) &&\n          (thisXMax > otherXMin) &&\n          upperDiff && lowerDiff;\n        break;\n      case \"bottom\":\n        upperDiff = (thisYVal - otherYVal) < upperBounds;\n        lowerDiff = (thisYVal - otherYVal) > lowerBounds;\n        collided = \n          (thisYVal > otherYVal) &&\n          (thisXMin < otherXMax) &&\n          (thisXMax > otherXMin) &&\n          upperDiff && lowerDiff;\n        break;\n      default:\n        break;\n    }\n\n    if (collided) return otherYVal;\n\n  } else {\n    const thisXVal = thisSide[0];\n    const [thisYMin, thisYMax] = thisSide[1];\n    const otherXVal = otherSide[0];\n    const [otherYMin, otherYMax] = otherSide[1];\n    \n    switch (side) {\n      case \"left\":\n        upperDiff = (otherXVal - thisXVal) < upperBounds;\n        lowerDiff = (otherXVal - thisXVal) > lowerBounds;\n        collided = \n          (thisXVal < otherXVal) &&\n          (thisYMin < otherYMax) &&\n          (thisYMax > otherYMin) &&\n          upperDiff && lowerDiff;\n          break;\n      case \"right\":\n        upperDiff = (thisXVal - otherXVal) < upperBounds;\n        lowerDiff = (thisXVal - otherXVal) > lowerBounds;\n        collided = \n          (thisXVal > otherXVal) &&\n          (thisYMin < otherYMax) &&\n          (thisYMax > otherYMin) &&\n          upperDiff && lowerDiff;\n          break;\n      default:\n        break;\n    }\n\n    if (collided) return otherXVal;\n    \n  }\n\n  return false;\n\n};\n\nexport const roomChange = (exitDir, currRoom) => {\n  let nextNodePos = [...currRoom.nodePos];\n  switch(exitDir) {\n    case \"up\":\n      nextNodePos[1] += 1;\n      break;\n    case \"down\":\n      nextNodePos[1] -= 1;\n      break;\n    case \"left\":\n      nextNodePos[0] -= 1;\n      break;\n    case \"right\":\n      nextNodePos[0] += 1;\n      break;\n  }\n  if (Global.ROOMS[`${nextNodePos}`]) {\n    Global.SESSION.game.room = Global.ROOMS[`${nextNodePos}`];\n  } else {\n    const neighbor = { [exitDir]: currRoom };\n    Global.SESSION.game.room = new Room(neighbor);\n    addValidNeighbors(currRoom);\n    addValidNeighbors(Global.SESSION.game.room);\n  }\n};\n\nexport const randNumPaths = max => {\n  let paths = [];\n  if (max > 3) {\n    for (let i = 0; i < Global.WEIGHTS[max][4]; i++) { paths.push(4) }\n    for (let i = 0; i < Global.WEIGHTS[max][3]; i++) { paths.push(3) }\n    for (let i = 0; i < Global.WEIGHTS[max][2]; i++) { paths.push(2) }\n    for (let i = 0; i < Global.WEIGHTS[max][1]; i++) { paths.push(1) }\n  } else if (max > 2) {\n    for (let i = 0; i < Global.WEIGHTS[max][3]; i++) { paths.push(3) }\n    for (let i = 0; i < Global.WEIGHTS[max][2]; i++) { paths.push(2) }\n    for (let i = 0; i < Global.WEIGHTS[max][1]; i++) { paths.push(1) }\n  } else if (max > 1) {\n    for (let i = 0; i < Global.WEIGHTS[max][2]; i++) { paths.push(2) }\n    for (let i = 0; i < Global.WEIGHTS[max][1]; i++) { paths.push(1) }\n  } else {\n    paths.push(1);\n  }\n\n  shuffle(paths);\n\n  return paths[Math.floor(Math.random()*paths.length)];\n  \n};\n\nexport const addValidNeighbors = room => {\n  let up = [...room.nodePos];\n  up[1] += 1;\n  up = up.toString();\n  let down = [...room.nodePos];\n  down[1] -= 1;\n  down = down.toString();\n  let left = [...room.nodePos];\n  left[0] -= 1;\n  left = left.toString();\n  let right = [...room.nodePos];\n  right[0] += 1;\n  right = right.toString();\n  if (\n    Global.ROOMS[up] && \n    (Global.ROOMS[up].neighbors.down !== \"X\") && \n    !room.neighbors.up\n  ) {\n    room.neighbors.up = Global.ROOMS[up];\n    Global.ROOMS[up].neighbors.down = room;\n  }\n  if (\n    Global.ROOMS[down] && \n    (Global.ROOMS[down].neighbors.up !== \"X\") && \n    !room.neighbors.down\n  ) {\n    room.neighbors.down = Global.ROOMS[down];\n    Global.ROOMS[down].neighbors.up = room;\n  }\n  if (\n    Global.ROOMS[left] && \n    (Global.ROOMS[left].neighbors.right !== \"X\") && \n    !room.neighbors.left\n  ) {\n    room.neighbors.left = Global.ROOMS[left];\n    Global.ROOMS[left].neighbors.right = room;\n  }\n  if (\n    Global.ROOMS[right] && \n    (Global.ROOMS[right].neighbors.left !== \"X\") && \n    !room.neighbors.right\n  ) {\n    room.neighbors.right = Global.ROOMS[right];\n    Global.ROOMS[right].neighbors.left = room;\n  }\n};\n\nexport const buildPaths = room => {\n  let paths = [];\n  let up = [...room.nodePos];\n  up[1] += 1;\n  up = up.toString();\n  let down = [...room.nodePos];\n  down[1] -= 1;\n  down = down.toString();\n  let left = [...room.nodePos];\n  left[0] -= 1;\n  left = left.toString();\n  let right = [...room.nodePos];\n  right[0] += 1;\n  right = right.toString();\n  if (!Global.ROOMS[up] || (Global.ROOMS[up].neighbors.down !== \"X\")) {\n    paths.push(\"U\");\n  }\n  if (!Global.ROOMS[down] || (Global.ROOMS[down].neighbors.up !== \"X\")) {\n    paths.push(\"D\");\n  }\n  if (!Global.ROOMS[left] || (Global.ROOMS[left].neighbors.right !== \"X\")) {\n    paths.push(\"L\");\n  }\n  if (!Global.ROOMS[right] || (Global.ROOMS[right].neighbors.left !== \"X\")) {\n    paths.push(\"R\");\n  }\n  return paths.sort().join(\"\");\n};\n\nexport const assignBlockedPaths = (room, paths) => {\n  if (!paths.includes(\"U\")) {\n    room.neighbors.up = \"X\";\n  }\n  if (!paths.includes(\"D\")) {\n    room.neighbors.down = \"X\";\n  }\n  if (!paths.includes(\"L\")) {\n    room.neighbors.left = \"X\";\n  }\n  if (!paths.includes(\"R\")) {\n    room.neighbors.right = \"X\";\n  }\n};\n\nexport const randNumCoins = () => {\n  let weightedNumCoins = [];\n  for (let i = 0; i < Global.COIN_WEIGHTS[3]; i++) { weightedNumCoins.push(3) }\n  for (let i = 0; i < Global.COIN_WEIGHTS[2]; i++) { weightedNumCoins.push(2) }\n  for (let i = 0; i < Global.COIN_WEIGHTS[1]; i++) { weightedNumCoins.push(1) }\n  for (let i = 0; i < Global.COIN_WEIGHTS[0]; i++) { weightedNumCoins.push(0) }\n  const randIdx = Math.floor(Math.random() * weightedNumCoins.length);\n  shuffle(weightedNumCoins);\n  return weightedNumCoins[randIdx];\n};\n\nexport const randCoinSound = () => {\n  const i = Math.floor(Math.random() * 9);\n  return document.getElementById(`coin${i}`);\n};\n\nexport const shuffle = arr => {\n  for (let i = arr.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n};\n\nexport const normalizedMovement = (myself, entity, chasingPlayer) => { \n  const mx = myself.center[0];\n  const my = myself.center[1];\n  const ex = entity.center[0];\n  const ey = entity.center[1];\n  let dx = ex - mx;\n  let dy = ey - my;\n  const distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n  \n  if (!chasingPlayer) {\n    const randAngle = Math.random() * 2 * Math.PI;\n    dx = Math.cos(randAngle) * myself.speed;\n    dy = Math.sin(randAngle) * myself.speed;\n  }\n  \n  const angle = Math.atan(dy/dx);\n  const ny = Math.sin(angle) * myself.speed;\n  const nx = Math.cos(angle) * myself.speed;\n\n  return {\n    distance,\n    dx,\n    dy,\n    nx,\n    ny,\n    up: (dy > 0) && (Math.abs(dy) > Math.abs(dx)),\n    down: (dy < 0) && (Math.abs(dy) > Math.abs(dx)),\n    left: (dx > 0) && (Math.abs(dx) > Math.abs(dy)),\n    right: (dx < 0) && (Math.abs(dx) > Math.abs(dy)),\n  };\n\n\n};","import Entity from \"./entity\";\nimport * as Global from \"./utils/global_vars\";\nimport { roomChange } from \"./utils/func_utils\";\n\nclass Player extends Entity {\n  constructor(pos,width,height,spritePalette) {\n    super(pos,width,height,spritePalette);\n    this.speed = 1.5;\n    this.normalizedSpeed = parseFloat(this.speed) / Math.sqrt(2);\n    this.pace = 24/this.speed;\n    this.speedModifier = 1;\n    this.stamina = 1000;\n    this.hp = 20;\n    this.stride = {\n      up: {\n        stepCount: 0,\n        palY: 48 * 6,\n      },\n      down: {\n        stepCount: 0,\n        palY: 48 * 0,\n      },\n      left: {\n        stepCount: 0,\n        palY: 48 * 2,\n      },\n      right: {\n        stepCount: 0,\n        palY: 48 * 4,\n      },\n    };\n  }\n\n  newRoomPos(dir) {\n    switch(dir) {\n      case \"up\":\n        this.pos[1] = 720-24;\n        break;\n      case \"down\":\n        this.pos[1] = -24;\n        break;\n      case \"left\":\n        this.pos[0] = 720-24;\n        break;\n      case \"right\":\n        this.pos[0] = -24;\n        break;\n    }\n  }\n\n  stridePalettePos(direction) {\n    this.pace = 24 / (this.speed * this.speedModifier);\n    if (this.stride[direction].stepCount <= this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 1;\n    } else if (this.stride[direction].stepCount <= 2 * this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 0;\n    } else if (this.stride[direction].stepCount <= 3 * this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 1;\n    } else if (this.stride[direction].stepCount <= 4 * this.pace) {\n      this.stride[direction].stepCount++;\n      return 48 * 2;\n    } else if (this.stride[direction].stepCount > 4 * this.pace) {\n      this.stride[direction].stepCount = 0;\n      return 48 * 1;\n    }\n  }\n\n  move(walls) {\n    const [\n      up,\n      down,\n      left,\n      right,\n      shift\n    ] = [\n      Global.KEYS[87],\n      Global.KEYS[83],\n      Global.KEYS[65],\n      Global.KEYS[68],\n      Global.KEYS[16],\n    ];\n    if (shift && this.stamina > 0) {\n      this.speedModifier = 2;\n      this.stamina -= 5;\n    } else {\n      this.speedModifier = 1;\n    }\n\n    if (this.stamina < 0) this.stamina = 0;\n    if (!shift && this.stamina < 1000) this.stamina += 1;\n\n    \n\n    // W key movements and sprite direction\n    if (up) {\n      if (left || right) {\n        this.colBox.pos[1] += -this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[1] += -this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"top\", wall)) break }\n      if (this.collisions.top) {\n        this.pos[1] = this.collisions.top - (this.height-this.colBox.height);\n      } else {\n        if (left || right && !this.collisions.top) {\n          this.pos[1] += -this.normalizedSpeed * this.speedModifier;\n          this.updateSides();\n        } else {\n          this.pos[1] += -this.speed * this.speedModifier;\n          this.updateSides();\n        }\n      }\n      this.drawOptions.palY = this.stride.up.palY;\n      if (!left && !right) {\n        this.drawOptions.palX = this.stridePalettePos(\"up\");\n        \n      }\n    }\n\n    // S key movements and sprite direction\n    if (down) {\n      if (left || right) {\n        this.colBox.pos[1] += this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[1] += this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"bottom\", wall)) break }\n      if (this.collisions.bottom) {\n        this.colBox.pos[1] = this.collisions.bottom;\n        this.pos[1] = this.collisions.bottom-48;\n      } else {\n        if (left || right) {\n          this.pos[1] += this.normalizedSpeed * this.speedModifier;\n          this.updateSides();\n        } else {\n          this.pos[1] += this.speed * this.speedModifier;\n          this.updateSides();\n        }\n      }\n      this.drawOptions.palY = this.stride.down.palY;\n      if (!left && !right) {\n        this.drawOptions.palX = this.stridePalettePos(\"down\");\n      }\n    }\n\n    // A key movement\n    if (left) {\n      if (up || down) {\n        this.colBox.pos[0] += -this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[0] += -this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"left\", wall)) break }\n      if (this.collisions.left) {\n        this.colBox.pos[0] = this.collisions.left;\n      } else {\n        if (up || down && !this.collisions.left) {\n          this.pos[0] += -this.normalizedSpeed * this.speedModifier;\n\n        } else {\n          this.pos[0] += -this.speed * this.speedModifier;\n\n        }\n      }\n      this.drawOptions.palY = this.stride.left.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"left\");\n    }\n\n    // D key movement\n    if (right) {\n      if (up || down) {\n        this.colBox.pos[0] += this.normalizedSpeed * this.speedModifier;\n      } else {\n        this.colBox.pos[0] += this.speed * this.speedModifier;\n      }\n      this.updateSides();\n      for(let wall of walls) { if (this.collidedOnSide(\"right\", wall)) break }\n      if (this.collisions.right) {\n        this.colBox.pos[0] = this.collisions.right;\n        this.pos[0] = this.collisions.right-(this.colBox.width + this.colBox.width/2);\n      } else {\n        if (up || down) {\n          this.pos[0] += this.normalizedSpeed * this.speedModifier;\n          this.updateSides();\n        } else {\n          this.pos[0] += this.speed * this.speedModifier;\n          this.updateSides();\n        }\n      }\n      this.drawOptions.palY = this.stride.right.palY;\n      this.drawOptions.palX = this.stridePalettePos(\"right\");\n    }\n\n    // if none of the keys are being pressed, go to default stance\n    if (!up && !down && !right && !left) {\n      this.drawOptions.palX = 48 * 1;\n    }\n\n    const [x,y] = this.pos;\n    let exitDir;\n    if (x < -24) {\n      exitDir = \"left\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    } else if (x > 720-24) {\n      exitDir = \"right\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    } else if (y < -24) {\n      exitDir = \"up\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    } else if (y > 720-24) {\n      exitDir = \"down\";\n      this.newRoomPos(exitDir);\n      roomChange(exitDir, Global.SESSION.game.room);\n    }\n\n    this.updateSides();\n    this.drawOptions.x = this.pos[0];\n    this.drawOptions.y = this.pos[1];\n  }\n\n}\n\nexport default Player;","import ColBox from \"./collision_box\";\nimport { collidedWithSide } from \"./utils/func_utils\";\n\nclass Entity {\n  constructor(pos,width,height,spritePalette) {\n    this.pos = pos;\n    this.width = width;\n    this.height = height;\n    const colBoxWidth = width/2;\n    const colBoxHeight = height/3;\n    \n    this.spritePalette = spritePalette;\n    this.drawOptions = {\n      image: spritePalette,\n      palX: 0,\n      palY: 0,\n      _sWidth: width,\n      _sHeight: height,\n      x: pos[0],\n      y: pos[1],\n      _dWidth: width,\n      _dHeight: height,\n    };\n    this.colBox = new ColBox(this,colBoxWidth,colBoxHeight);\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n    this.collisions = {\n      top: false,\n      bottom: false,\n      left: false,\n      right: false,\n    };\n    \n  }\n\n  colBoxHook() { // this will center the colBox on the bottom\n    let [x,y] = [this.pos[0],this.pos[1]];\n    let [cx,cy] = [\n      x+((this.width - this.colBox.width)/2),\n      y+(this.height - this.colBox.height),\n    ];\n    return [cx,cy];\n  }\n\n  updateSides() {\n    this.colBox.updateSides();\n    this.top = this.colBox.top;\n    this.bottom = this.colBox.bottom;\n    this.left = this.colBox.left;\n    this.right = this.colBox.right;\n  }\n\n  collidedOnSide(side, otherObject) {\n    let otherSide;\n    switch(side) {\n      case \"top\":\n        otherSide = \"bottom\";\n        break;\n      case \"bottom\":\n        otherSide = \"top\";\n        break;\n      case \"left\":\n        otherSide = \"right\";\n        break;\n      case \"right\":\n        otherSide = \"left\";\n        break;\n      default:\n        otherSide = null;\n        break;\n    }\n    this.collisions[side] = collidedWithSide(side, this[side], otherObject[otherSide]);\n    return this.collisions[side];\n  }\n\n  draw(ctx) {\n    ctx.drawImage(...Object.values(this.drawOptions));\n    this.colBox.centerOnEntity();\n    this.colBox.draw(ctx);\n  }\n}\n\nexport default Entity;","import Player from \"./player\";\nimport Room from \"./room\";\nimport * as Global from \"./utils/global_vars\";\n\nclass Game {\n  constructor(ctx, playerSprite) {\n    this.fpsInterval = 1000/60;\n    this.toPlayer = 100;\n    const startingPos = [48*7, 48*7];\n    this.player = new Player(startingPos, ...Global.SPRITE_DIMS, playerSprite);\n    Global.SESSION.player = this.player;\n    this.ctx = ctx;\n    // const room = { \"left\": new Room() }; // testing new Room(room)\n    this.startingRoom = new Room();\n    this.room = this.startingRoom;\n    this.player.draw(ctx);\n    Global.SESSION.game = this;\n    Global.SESSION.stop = false;\n    Global.SESSION.coinCount = 0;\n    this.gameStep = this.gameStep.bind(this);\n    this.stop = this.stop.bind(this);\n    Global.SESSION.game.play();\n  }\n\n\n\n  stop() {\n    if (this.requestId) {\n      this.requestStop = true;\n    }\n  }\n\n  gameStep() {\n    this.requestId = requestAnimationFrame(this.gameStep);\n    let now = Date.now();\n    let elapsed = now - this.then;\n\n    if (elapsed > this.fpsInterval) {\n      this.then = now - (elapsed % this.fpsInterval);\n      const player = Global.SESSION.player;\n      this.ctx.clearRect(0,0, Global.WIDTH, Global.HEIGHT);\n      player.move(this.room.walls);\n      this.room.animate();\n      this.room.draw(this.ctx);\n      player.draw(this.ctx);\n      if (this.requestStop) {\n        cancelAnimationFrame(this.requestId);\n        return;\n      }\n    }\n  }\n\n  play() {\n    this.then = Date.now();\n    this.gameStep();\n    requestAnimationFrame(this.gameStep);\n  }\n}\n\nexport default Game;","import \"./styles/index.scss\";\nimport installListeners from \"./scripts/utils/install_listeners\";\nimport * as Global from \"./scripts/utils/global_vars\";\nimport { newGame } from \"./scripts/utils/func_utils\";\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n  const canvas = document.getElementById(\"display\");\n  canvas.width = Global.WIDTH;\n  canvas.height = Global.HEIGHT;\n  const ctx = canvas.getContext(\"2d\");\n\n  installListeners(Global.KEYS);\n\n  let coinSprite = new Image();\n  coinSprite.src = \"./dist/assets/images/coin/coin.png\";\n  coinSprite.onload = () => {\n    Global.SPRITES.coin = coinSprite;\n  };\n\n  let monstersSprites = new Image();\n  monstersSprites.src = \"./dist/assets/images/enemies/monsters.png\";\n  monstersSprites.onload = () => {\n    Global.SPRITES.monsters = monstersSprites;\n  };\n  \n  for (let path of Global.ALL_PATHS) {\n    path = path.split(\"\").sort().join(\"\");\n    for (let i = 0; i < 3; i++) {\n      const background = new Image();\n      background.src = `./dist/assets/images/map_imgs/${path.length}/${path}/map${i}.png`;\n      \n      background.onload = () => {\n        Global.BG_IMGS[`${path.length}${path}${i}`] = background;\n        // Global.GB_IMGS[\"4DLRU0\"] = background\n      };\n    }\n  }\n\n  let playerSprite = new Image();\n  playerSprite.src = \"./dist/assets/images/rogue/rogue_walk.png\";\n  \n  playerSprite.onload = () => {\n    setTimeout(() => {\n      Global.GAME_OPTIONS[\"ctx\"] = ctx;\n      Global.GAME_OPTIONS[\"playerSprite\"] = playerSprite;\n      newGame();\n    },1000);\n    \n  }\n\n});","import * as Global from \"./global_vars\";\nimport Game from \"../game\";\nimport { newGame } from \"../utils/func_utils\";\n\nexport default (KEYS) => {\n  document.addEventListener(\"keydown\", e => {\n    if (e.keyCode === 87 && !KEYS[87]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 65 && !KEYS[65]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 83 && !KEYS[83]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 68 && !KEYS[68]) KEYS[e.keyCode] = true;\n    if (e.keyCode === 16 && !KEYS[16]) KEYS[e.keyCode] = true;\n\n  });\n  document.addEventListener(\"keyup\", e => {\n    if (e.keyCode === 87 && KEYS[87]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 65 && KEYS[65]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 83 && KEYS[83]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 68 && KEYS[68]) KEYS[e.keyCode] = false;\n    if (e.keyCode === 16 && KEYS[16]) KEYS[e.keyCode] = false;\n  });\n\n  const howTo = document.getElementById(\"how-to\");\n  \n  howTo.addEventListener(\"mouseenter\", e => {\n    document.getElementById(\"how-to-pointer\").classList.add(\"active\");\n    document.getElementById(\"how-to-sound\").play();\n    document.getElementById(\"how-to\").classList.add(\"active\");\n    document.querySelector(\"#how-to > ul\").classList.add(\"active\");\n  });\n  howTo.addEventListener(\"mouseleave\", e => {\n    document.getElementById(\"how-to\").classList.remove(\"active\");\n    document.getElementById(\"how-to-pointer\").classList.remove(\"active\");\n    document.querySelector(\"#how-to > ul\").classList.remove(\"active\");\n  });\n\n  const restart = document.getElementById(\"restart\");\n  restart.addEventListener(\"mouseenter\", e => {\n    document.getElementById(\"restart-sound\").play();\n    document.getElementById(\"restart\").classList.add(\"active\");\n    document.getElementById(\"restart-pointer\").classList.add(\"active\");\n  });\n  restart.addEventListener(\"mouseleave\", e => {\n    document.getElementById(\"restart\").classList.remove(\"active\");\n    document.getElementById(\"restart-pointer\").classList.remove(\"active\");\n  });\n  restart.addEventListener(\"click\", e => {\n    e.preventDefault();\n    newGame();\n  });\n\n}\n"],"sourceRoot":""}